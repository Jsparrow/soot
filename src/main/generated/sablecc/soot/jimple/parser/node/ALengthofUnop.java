/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class ALengthofUnop extends PUnop
{
    private TLengthof lengthof;

    public ALengthofUnop()
    {
        // Constructor
    }

    public ALengthofUnop(
        @SuppressWarnings("hiding") TLengthof _lengthof_)
    {
        // Constructor
        setLengthof(_lengthof_);

    }

    @Override
    public Object clone()
    {
        return new ALengthofUnop(
            cloneNode(this.lengthof));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALengthofUnop(this);
    }

    public TLengthof getLengthof()
    {
        return this.lengthof;
    }

    public void setLengthof(TLengthof node)
    {
        if(this.lengthof != null)
        {
            this.lengthof.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.lengthof = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this.lengthof);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.lengthof == child)
        {
            this.lengthof = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.lengthof == oldChild)
        {
            setLengthof((TLengthof) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
