/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class ACastExpression extends PExpression
{
    private TLParen lParen;
    private PNonvoidType nonvoidType;
    private TRParen rParen;
    private PImmediate immediate;

    public ACastExpression()
    {
        // Constructor
    }

    public ACastExpression(
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PNonvoidType _nonvoidType_,
        @SuppressWarnings("hiding") TRParen _rParen_,
        @SuppressWarnings("hiding") PImmediate _immediate_)
    {
        // Constructor
        setLParen(_lParen_);

        setNonvoidType(_nonvoidType_);

        setRParen(_rParen_);

        setImmediate(_immediate_);

    }

    @Override
    public Object clone()
    {
        return new ACastExpression(
            cloneNode(this.lParen),
            cloneNode(this.nonvoidType),
            cloneNode(this.rParen),
            cloneNode(this.immediate));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACastExpression(this);
    }

    public TLParen getLParen()
    {
        return this.lParen;
    }

    public void setLParen(TLParen node)
    {
        if(this.lParen != null)
        {
            this.lParen.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.lParen = node;
    }

    public PNonvoidType getNonvoidType()
    {
        return this.nonvoidType;
    }

    public void setNonvoidType(PNonvoidType node)
    {
        if(this.nonvoidType != null)
        {
            this.nonvoidType.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.nonvoidType = node;
    }

    public TRParen getRParen()
    {
        return this.rParen;
    }

    public void setRParen(TRParen node)
    {
        if(this.rParen != null)
        {
            this.rParen.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.rParen = node;
    }

    public PImmediate getImmediate()
    {
        return this.immediate;
    }

    public void setImmediate(PImmediate node)
    {
        if(this.immediate != null)
        {
            this.immediate.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.immediate = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.lParen)).append(toString(this.nonvoidType)).append(toString(this.rParen)).append(toString(this.immediate))
				.toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.lParen == child)
        {
            this.lParen = null;
            return;
        }

        if(this.nonvoidType == child)
        {
            this.nonvoidType = null;
            return;
        }

        if(this.rParen == child)
        {
            this.rParen = null;
            return;
        }

        if(this.immediate == child)
        {
            this.immediate = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.lParen == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this.nonvoidType == oldChild)
        {
            setNonvoidType((PNonvoidType) newChild);
            return;
        }

        if(this.rParen == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        if(this.immediate == oldChild)
        {
            setImmediate((PImmediate) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
