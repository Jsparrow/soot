/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AIdentArrayRef extends PArrayRef
{
    private TIdentifier identifier;
    private PFixedArrayDescriptor fixedArrayDescriptor;

    public AIdentArrayRef()
    {
        // Constructor
    }

    public AIdentArrayRef(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PFixedArrayDescriptor _fixedArrayDescriptor_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setFixedArrayDescriptor(_fixedArrayDescriptor_);

    }

    @Override
    public Object clone()
    {
        return new AIdentArrayRef(
            cloneNode(this.identifier),
            cloneNode(this.fixedArrayDescriptor));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIdentArrayRef(this);
    }

    public TIdentifier getIdentifier()
    {
        return this.identifier;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this.identifier != null)
        {
            this.identifier.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.identifier = node;
    }

    public PFixedArrayDescriptor getFixedArrayDescriptor()
    {
        return this.fixedArrayDescriptor;
    }

    public void setFixedArrayDescriptor(PFixedArrayDescriptor node)
    {
        if(this.fixedArrayDescriptor != null)
        {
            this.fixedArrayDescriptor.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.fixedArrayDescriptor = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.identifier)).append(toString(this.fixedArrayDescriptor)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.identifier == child)
        {
            this.identifier = null;
            return;
        }

        if(this.fixedArrayDescriptor == child)
        {
            this.fixedArrayDescriptor = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.identifier == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this.fixedArrayDescriptor == oldChild)
        {
            setFixedArrayDescriptor((PFixedArrayDescriptor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
