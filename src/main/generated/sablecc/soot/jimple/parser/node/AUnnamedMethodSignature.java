/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AUnnamedMethodSignature extends PUnnamedMethodSignature
{
    private TCmplt cmplt;
    private PType type;
    private TLParen lParen;
    private PParameterList parameterList;
    private TRParen rParen;
    private TCmpgt cmpgt;

    public AUnnamedMethodSignature()
    {
        // Constructor
    }

    public AUnnamedMethodSignature(
        @SuppressWarnings("hiding") TCmplt _cmplt_,
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PParameterList _parameterList_,
        @SuppressWarnings("hiding") TRParen _rParen_,
        @SuppressWarnings("hiding") TCmpgt _cmpgt_)
    {
        // Constructor
        setCmplt(_cmplt_);

        setType(_type_);

        setLParen(_lParen_);

        setParameterList(_parameterList_);

        setRParen(_rParen_);

        setCmpgt(_cmpgt_);

    }

    @Override
    public Object clone()
    {
        return new AUnnamedMethodSignature(
            cloneNode(this.cmplt),
            cloneNode(this.type),
            cloneNode(this.lParen),
            cloneNode(this.parameterList),
            cloneNode(this.rParen),
            cloneNode(this.cmpgt));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUnnamedMethodSignature(this);
    }

    public TCmplt getCmplt()
    {
        return this.cmplt;
    }

    public void setCmplt(TCmplt node)
    {
        if(this.cmplt != null)
        {
            this.cmplt.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.cmplt = node;
    }

    public PType getType()
    {
        return this.type;
    }

    public void setType(PType node)
    {
        if(this.type != null)
        {
            this.type.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.type = node;
    }

    public TLParen getLParen()
    {
        return this.lParen;
    }

    public void setLParen(TLParen node)
    {
        if(this.lParen != null)
        {
            this.lParen.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.lParen = node;
    }

    public PParameterList getParameterList()
    {
        return this.parameterList;
    }

    public void setParameterList(PParameterList node)
    {
        if(this.parameterList != null)
        {
            this.parameterList.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.parameterList = node;
    }

    public TRParen getRParen()
    {
        return this.rParen;
    }

    public void setRParen(TRParen node)
    {
        if(this.rParen != null)
        {
            this.rParen.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.rParen = node;
    }

    public TCmpgt getCmpgt()
    {
        return this.cmpgt;
    }

    public void setCmpgt(TCmpgt node)
    {
        if(this.cmpgt != null)
        {
            this.cmpgt.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.cmpgt = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.cmplt)).append(toString(this.type)).append(toString(this.lParen)).append(toString(this.parameterList))
				.append(toString(this.rParen)).append(toString(this.cmpgt)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.cmplt == child)
        {
            this.cmplt = null;
            return;
        }

        if(this.type == child)
        {
            this.type = null;
            return;
        }

        if(this.lParen == child)
        {
            this.lParen = null;
            return;
        }

        if(this.parameterList == child)
        {
            this.parameterList = null;
            return;
        }

        if(this.rParen == child)
        {
            this.rParen = null;
            return;
        }

        if(this.cmpgt == child)
        {
            this.cmpgt = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.cmplt == oldChild)
        {
            setCmplt((TCmplt) newChild);
            return;
        }

        if(this.type == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this.lParen == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this.parameterList == oldChild)
        {
            setParameterList((PParameterList) newChild);
            return;
        }

        if(this.rParen == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        if(this.cmpgt == oldChild)
        {
            setCmpgt((TCmpgt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
