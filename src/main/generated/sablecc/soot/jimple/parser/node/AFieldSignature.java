/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AFieldSignature extends PFieldSignature
{
    private TCmplt cmplt;
    private PClassName className;
    private TColon first;
    private PType type;
    private PName fieldName;
    private TCmpgt cmpgt;

    public AFieldSignature()
    {
        // Constructor
    }

    public AFieldSignature(
        @SuppressWarnings("hiding") TCmplt _cmplt_,
        @SuppressWarnings("hiding") PClassName _className_,
        @SuppressWarnings("hiding") TColon _first_,
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") PName _fieldName_,
        @SuppressWarnings("hiding") TCmpgt _cmpgt_)
    {
        // Constructor
        setCmplt(_cmplt_);

        setClassName(_className_);

        setFirst(_first_);

        setType(_type_);

        setFieldName(_fieldName_);

        setCmpgt(_cmpgt_);

    }

    @Override
    public Object clone()
    {
        return new AFieldSignature(
            cloneNode(this.cmplt),
            cloneNode(this.className),
            cloneNode(this.first),
            cloneNode(this.type),
            cloneNode(this.fieldName),
            cloneNode(this.cmpgt));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFieldSignature(this);
    }

    public TCmplt getCmplt()
    {
        return this.cmplt;
    }

    public void setCmplt(TCmplt node)
    {
        if(this.cmplt != null)
        {
            this.cmplt.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.cmplt = node;
    }

    public PClassName getClassName()
    {
        return this.className;
    }

    public void setClassName(PClassName node)
    {
        if(this.className != null)
        {
            this.className.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.className = node;
    }

    public TColon getFirst()
    {
        return this.first;
    }

    public void setFirst(TColon node)
    {
        if(this.first != null)
        {
            this.first.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.first = node;
    }

    public PType getType()
    {
        return this.type;
    }

    public void setType(PType node)
    {
        if(this.type != null)
        {
            this.type.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.type = node;
    }

    public PName getFieldName()
    {
        return this.fieldName;
    }

    public void setFieldName(PName node)
    {
        if(this.fieldName != null)
        {
            this.fieldName.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.fieldName = node;
    }

    public TCmpgt getCmpgt()
    {
        return this.cmpgt;
    }

    public void setCmpgt(TCmpgt node)
    {
        if(this.cmpgt != null)
        {
            this.cmpgt.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.cmpgt = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.cmplt)).append(toString(this.className)).append(toString(this.first)).append(toString(this.type))
				.append(toString(this.fieldName)).append(toString(this.cmpgt)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.cmplt == child)
        {
            this.cmplt = null;
            return;
        }

        if(this.className == child)
        {
            this.className = null;
            return;
        }

        if(this.first == child)
        {
            this.first = null;
            return;
        }

        if(this.type == child)
        {
            this.type = null;
            return;
        }

        if(this.fieldName == child)
        {
            this.fieldName = null;
            return;
        }

        if(this.cmpgt == child)
        {
            this.cmpgt = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.cmplt == oldChild)
        {
            setCmplt((TCmplt) newChild);
            return;
        }

        if(this.className == oldChild)
        {
            setClassName((PClassName) newChild);
            return;
        }

        if(this.first == oldChild)
        {
            setFirst((TColon) newChild);
            return;
        }

        if(this.type == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this.fieldName == oldChild)
        {
            setFieldName((PName) newChild);
            return;
        }

        if(this.cmpgt == oldChild)
        {
            setCmpgt((TCmpgt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
