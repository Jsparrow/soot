/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AInstanceofExpression extends PExpression
{
    private PImmediate immediate;
    private TInstanceof _instanceof_;
    private PNonvoidType nonvoidType;

    public AInstanceofExpression()
    {
        // Constructor
    }

    public AInstanceofExpression(
        @SuppressWarnings("hiding") PImmediate _immediate_,
        @SuppressWarnings("hiding") TInstanceof _instanceof_,
        @SuppressWarnings("hiding") PNonvoidType _nonvoidType_)
    {
        // Constructor
        setImmediate(_immediate_);

        setInstanceof(_instanceof_);

        setNonvoidType(_nonvoidType_);

    }

    @Override
    public Object clone()
    {
        return new AInstanceofExpression(
            cloneNode(this.immediate),
            cloneNode(this._instanceof_),
            cloneNode(this.nonvoidType));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInstanceofExpression(this);
    }

    public PImmediate getImmediate()
    {
        return this.immediate;
    }

    public void setImmediate(PImmediate node)
    {
        if(this.immediate != null)
        {
            this.immediate.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.immediate = node;
    }

    public TInstanceof getInstanceof()
    {
        return this._instanceof_;
    }

    public void setInstanceof(TInstanceof node)
    {
        if(this._instanceof_ != null)
        {
            this._instanceof_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._instanceof_ = node;
    }

    public PNonvoidType getNonvoidType()
    {
        return this.nonvoidType;
    }

    public void setNonvoidType(PNonvoidType node)
    {
        if(this.nonvoidType != null)
        {
            this.nonvoidType.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.nonvoidType = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.immediate)).append(toString(this._instanceof_)).append(toString(this.nonvoidType)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.immediate == child)
        {
            this.immediate = null;
            return;
        }

        if(this._instanceof_ == child)
        {
            this._instanceof_ = null;
            return;
        }

        if(this.nonvoidType == child)
        {
            this.nonvoidType = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.immediate == oldChild)
        {
            setImmediate((PImmediate) newChild);
            return;
        }

        if(this._instanceof_ == oldChild)
        {
            setInstanceof((TInstanceof) newChild);
            return;
        }

        if(this.nonvoidType == oldChild)
        {
            setNonvoidType((PNonvoidType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
