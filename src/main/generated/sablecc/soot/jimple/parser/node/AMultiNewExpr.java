/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import java.util.*;
import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AMultiNewExpr extends PNewExpr
{
    private TNewmultiarray newmultiarray;
    private TLParen lParen;
    private PBaseType baseType;
    private TRParen rParen;
    private final LinkedList<PArrayDescriptor> arrayDescriptor = new LinkedList<>();

    public AMultiNewExpr()
    {
        // Constructor
    }

    public AMultiNewExpr(
        @SuppressWarnings("hiding") TNewmultiarray _newmultiarray_,
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PBaseType _baseType_,
        @SuppressWarnings("hiding") TRParen _rParen_,
        @SuppressWarnings("hiding") List<?> _arrayDescriptor_)
    {
        // Constructor
        setNewmultiarray(_newmultiarray_);

        setLParen(_lParen_);

        setBaseType(_baseType_);

        setRParen(_rParen_);

        setArrayDescriptor(_arrayDescriptor_);

    }

    @Override
    public Object clone()
    {
        return new AMultiNewExpr(
            cloneNode(this.newmultiarray),
            cloneNode(this.lParen),
            cloneNode(this.baseType),
            cloneNode(this.rParen),
            cloneList(this.arrayDescriptor));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultiNewExpr(this);
    }

    public TNewmultiarray getNewmultiarray()
    {
        return this.newmultiarray;
    }

    public void setNewmultiarray(TNewmultiarray node)
    {
        if(this.newmultiarray != null)
        {
            this.newmultiarray.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.newmultiarray = node;
    }

    public TLParen getLParen()
    {
        return this.lParen;
    }

    public void setLParen(TLParen node)
    {
        if(this.lParen != null)
        {
            this.lParen.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.lParen = node;
    }

    public PBaseType getBaseType()
    {
        return this.baseType;
    }

    public void setBaseType(PBaseType node)
    {
        if(this.baseType != null)
        {
            this.baseType.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.baseType = node;
    }

    public TRParen getRParen()
    {
        return this.rParen;
    }

    public void setRParen(TRParen node)
    {
        if(this.rParen != null)
        {
            this.rParen.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.rParen = node;
    }

    public LinkedList<PArrayDescriptor> getArrayDescriptor()
    {
        return this.arrayDescriptor;
    }

    public void setArrayDescriptor(List<?> list)
    {
        this.arrayDescriptor.forEach(e -> e.parent(null));
        this.arrayDescriptor.clear();

        list.stream().map(obj_e -> (PArrayDescriptor) obj_e).forEach(e -> {
			if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }
			e.parent(this);
			this.arrayDescriptor.add(e);
		});
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.newmultiarray)).append(toString(this.lParen)).append(toString(this.baseType)).append(toString(this.rParen))
				.append(toString(this.arrayDescriptor)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.newmultiarray == child)
        {
            this.newmultiarray = null;
            return;
        }

        if(this.lParen == child)
        {
            this.lParen = null;
            return;
        }

        if(this.baseType == child)
        {
            this.baseType = null;
            return;
        }

        if(this.rParen == child)
        {
            this.rParen = null;
            return;
        }

        if(this.arrayDescriptor.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.newmultiarray == oldChild)
        {
            setNewmultiarray((TNewmultiarray) newChild);
            return;
        }

        if(this.lParen == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this.baseType == oldChild)
        {
            setBaseType((PBaseType) newChild);
            return;
        }

        if(this.rParen == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        for(ListIterator<PArrayDescriptor> i = this.arrayDescriptor.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PArrayDescriptor) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
