/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AMultiArgList extends PArgList
{
    private PImmediate immediate;
    private TComma comma;
    private PArgList argList;

    public AMultiArgList()
    {
        // Constructor
    }

    public AMultiArgList(
        @SuppressWarnings("hiding") PImmediate _immediate_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PArgList _argList_)
    {
        // Constructor
        setImmediate(_immediate_);

        setComma(_comma_);

        setArgList(_argList_);

    }

    @Override
    public Object clone()
    {
        return new AMultiArgList(
            cloneNode(this.immediate),
            cloneNode(this.comma),
            cloneNode(this.argList));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultiArgList(this);
    }

    public PImmediate getImmediate()
    {
        return this.immediate;
    }

    public void setImmediate(PImmediate node)
    {
        if(this.immediate != null)
        {
            this.immediate.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.immediate = node;
    }

    public TComma getComma()
    {
        return this.comma;
    }

    public void setComma(TComma node)
    {
        if(this.comma != null)
        {
            this.comma.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.comma = node;
    }

    public PArgList getArgList()
    {
        return this.argList;
    }

    public void setArgList(PArgList node)
    {
        if(this.argList != null)
        {
            this.argList.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.argList = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.immediate)).append(toString(this.comma)).append(toString(this.argList)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.immediate == child)
        {
            this.immediate = null;
            return;
        }

        if(this.comma == child)
        {
            this.comma = null;
            return;
        }

        if(this.argList == child)
        {
            this.argList = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.immediate == oldChild)
        {
            setImmediate((PImmediate) newChild);
            return;
        }

        if(this.comma == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this.argList == oldChild)
        {
            setArgList((PArgList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
