/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class ALocalFieldRef extends PFieldRef
{
    private PLocalName localName;
    private TDot dot;
    private PFieldSignature fieldSignature;

    public ALocalFieldRef()
    {
        // Constructor
    }

    public ALocalFieldRef(
        @SuppressWarnings("hiding") PLocalName _localName_,
        @SuppressWarnings("hiding") TDot _dot_,
        @SuppressWarnings("hiding") PFieldSignature _fieldSignature_)
    {
        // Constructor
        setLocalName(_localName_);

        setDot(_dot_);

        setFieldSignature(_fieldSignature_);

    }

    @Override
    public Object clone()
    {
        return new ALocalFieldRef(
            cloneNode(this.localName),
            cloneNode(this.dot),
            cloneNode(this.fieldSignature));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALocalFieldRef(this);
    }

    public PLocalName getLocalName()
    {
        return this.localName;
    }

    public void setLocalName(PLocalName node)
    {
        if(this.localName != null)
        {
            this.localName.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.localName = node;
    }

    public TDot getDot()
    {
        return this.dot;
    }

    public void setDot(TDot node)
    {
        if(this.dot != null)
        {
            this.dot.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.dot = node;
    }

    public PFieldSignature getFieldSignature()
    {
        return this.fieldSignature;
    }

    public void setFieldSignature(PFieldSignature node)
    {
        if(this.fieldSignature != null)
        {
            this.fieldSignature.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.fieldSignature = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.localName)).append(toString(this.dot)).append(toString(this.fieldSignature)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.localName == child)
        {
            this.localName = null;
            return;
        }

        if(this.dot == child)
        {
            this.dot = null;
            return;
        }

        if(this.fieldSignature == child)
        {
            this.fieldSignature = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.localName == oldChild)
        {
            setLocalName((PLocalName) newChild);
            return;
        }

        if(this.dot == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        if(this.fieldSignature == oldChild)
        {
            setFieldSignature((PFieldSignature) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
