/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AArrayNewExpr extends PNewExpr
{
    private TNewarray newarray;
    private TLParen lParen;
    private PNonvoidType nonvoidType;
    private TRParen rParen;
    private PFixedArrayDescriptor fixedArrayDescriptor;

    public AArrayNewExpr()
    {
        // Constructor
    }

    public AArrayNewExpr(
        @SuppressWarnings("hiding") TNewarray _newarray_,
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PNonvoidType _nonvoidType_,
        @SuppressWarnings("hiding") TRParen _rParen_,
        @SuppressWarnings("hiding") PFixedArrayDescriptor _fixedArrayDescriptor_)
    {
        // Constructor
        setNewarray(_newarray_);

        setLParen(_lParen_);

        setNonvoidType(_nonvoidType_);

        setRParen(_rParen_);

        setFixedArrayDescriptor(_fixedArrayDescriptor_);

    }

    @Override
    public Object clone()
    {
        return new AArrayNewExpr(
            cloneNode(this.newarray),
            cloneNode(this.lParen),
            cloneNode(this.nonvoidType),
            cloneNode(this.rParen),
            cloneNode(this.fixedArrayDescriptor));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayNewExpr(this);
    }

    public TNewarray getNewarray()
    {
        return this.newarray;
    }

    public void setNewarray(TNewarray node)
    {
        if(this.newarray != null)
        {
            this.newarray.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.newarray = node;
    }

    public TLParen getLParen()
    {
        return this.lParen;
    }

    public void setLParen(TLParen node)
    {
        if(this.lParen != null)
        {
            this.lParen.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.lParen = node;
    }

    public PNonvoidType getNonvoidType()
    {
        return this.nonvoidType;
    }

    public void setNonvoidType(PNonvoidType node)
    {
        if(this.nonvoidType != null)
        {
            this.nonvoidType.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.nonvoidType = node;
    }

    public TRParen getRParen()
    {
        return this.rParen;
    }

    public void setRParen(TRParen node)
    {
        if(this.rParen != null)
        {
            this.rParen.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.rParen = node;
    }

    public PFixedArrayDescriptor getFixedArrayDescriptor()
    {
        return this.fixedArrayDescriptor;
    }

    public void setFixedArrayDescriptor(PFixedArrayDescriptor node)
    {
        if(this.fixedArrayDescriptor != null)
        {
            this.fixedArrayDescriptor.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.fixedArrayDescriptor = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.newarray)).append(toString(this.lParen)).append(toString(this.nonvoidType)).append(toString(this.rParen))
				.append(toString(this.fixedArrayDescriptor)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.newarray == child)
        {
            this.newarray = null;
            return;
        }

        if(this.lParen == child)
        {
            this.lParen = null;
            return;
        }

        if(this.nonvoidType == child)
        {
            this.nonvoidType = null;
            return;
        }

        if(this.rParen == child)
        {
            this.rParen = null;
            return;
        }

        if(this.fixedArrayDescriptor == child)
        {
            this.fixedArrayDescriptor = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.newarray == oldChild)
        {
            setNewarray((TNewarray) newChild);
            return;
        }

        if(this.lParen == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this.nonvoidType == oldChild)
        {
            setNonvoidType((PNonvoidType) newChild);
            return;
        }

        if(this.rParen == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        if(this.fixedArrayDescriptor == oldChild)
        {
            setFixedArrayDescriptor((PFixedArrayDescriptor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
