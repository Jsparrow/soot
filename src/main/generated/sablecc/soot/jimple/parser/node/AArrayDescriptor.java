/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AArrayDescriptor extends PArrayDescriptor
{
    private TLBracket lBracket;
    private PImmediate immediate;
    private TRBracket rBracket;

    public AArrayDescriptor()
    {
        // Constructor
    }

    public AArrayDescriptor(
        @SuppressWarnings("hiding") TLBracket _lBracket_,
        @SuppressWarnings("hiding") PImmediate _immediate_,
        @SuppressWarnings("hiding") TRBracket _rBracket_)
    {
        // Constructor
        setLBracket(_lBracket_);

        setImmediate(_immediate_);

        setRBracket(_rBracket_);

    }

    @Override
    public Object clone()
    {
        return new AArrayDescriptor(
            cloneNode(this.lBracket),
            cloneNode(this.immediate),
            cloneNode(this.rBracket));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayDescriptor(this);
    }

    public TLBracket getLBracket()
    {
        return this.lBracket;
    }

    public void setLBracket(TLBracket node)
    {
        if(this.lBracket != null)
        {
            this.lBracket.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.lBracket = node;
    }

    public PImmediate getImmediate()
    {
        return this.immediate;
    }

    public void setImmediate(PImmediate node)
    {
        if(this.immediate != null)
        {
            this.immediate.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.immediate = node;
    }

    public TRBracket getRBracket()
    {
        return this.rBracket;
    }

    public void setRBracket(TRBracket node)
    {
        if(this.rBracket != null)
        {
            this.rBracket.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.rBracket = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.lBracket)).append(toString(this.immediate)).append(toString(this.rBracket)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.lBracket == child)
        {
            this.lBracket = null;
            return;
        }

        if(this.immediate == child)
        {
            this.immediate = null;
            return;
        }

        if(this.rBracket == child)
        {
            this.rBracket = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.lBracket == oldChild)
        {
            setLBracket((TLBracket) newChild);
            return;
        }

        if(this.immediate == oldChild)
        {
            setImmediate((PImmediate) newChild);
            return;
        }

        if(this.rBracket == oldChild)
        {
            setRBracket((TRBracket) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
