/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AConstantCaseLabel extends PCaseLabel
{
    private TCase _case_;
    private TMinus minus;
    private TIntegerConstant integerConstant;

    public AConstantCaseLabel()
    {
        // Constructor
    }

    public AConstantCaseLabel(
        @SuppressWarnings("hiding") TCase _case_,
        @SuppressWarnings("hiding") TMinus _minus_,
        @SuppressWarnings("hiding") TIntegerConstant _integerConstant_)
    {
        // Constructor
        setCase(_case_);

        setMinus(_minus_);

        setIntegerConstant(_integerConstant_);

    }

    @Override
    public Object clone()
    {
        return new AConstantCaseLabel(
            cloneNode(this._case_),
            cloneNode(this.minus),
            cloneNode(this.integerConstant));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConstantCaseLabel(this);
    }

    public TCase getCase()
    {
        return this._case_;
    }

    public void setCase(TCase node)
    {
        if(this._case_ != null)
        {
            this._case_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._case_ = node;
    }

    public TMinus getMinus()
    {
        return this.minus;
    }

    public void setMinus(TMinus node)
    {
        if(this.minus != null)
        {
            this.minus.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.minus = node;
    }

    public TIntegerConstant getIntegerConstant()
    {
        return this.integerConstant;
    }

    public void setIntegerConstant(TIntegerConstant node)
    {
        if(this.integerConstant != null)
        {
            this.integerConstant.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.integerConstant = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this._case_)).append(toString(this.minus)).append(toString(this.integerConstant)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._case_ == child)
        {
            this._case_ = null;
            return;
        }

        if(this.minus == child)
        {
            this.minus = null;
            return;
        }

        if(this.integerConstant == child)
        {
            this.integerConstant = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._case_ == oldChild)
        {
            setCase((TCase) newChild);
            return;
        }

        if(this.minus == oldChild)
        {
            setMinus((TMinus) newChild);
            return;
        }

        if(this.integerConstant == oldChild)
        {
            setIntegerConstant((TIntegerConstant) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
