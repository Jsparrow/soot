/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AInvokeStatement extends PStatement
{
    private PInvokeExpr invokeExpr;
    private TSemicolon semicolon;

    public AInvokeStatement()
    {
        // Constructor
    }

    public AInvokeStatement(
        @SuppressWarnings("hiding") PInvokeExpr _invokeExpr_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setInvokeExpr(_invokeExpr_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AInvokeStatement(
            cloneNode(this.invokeExpr),
            cloneNode(this.semicolon));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInvokeStatement(this);
    }

    public PInvokeExpr getInvokeExpr()
    {
        return this.invokeExpr;
    }

    public void setInvokeExpr(PInvokeExpr node)
    {
        if(this.invokeExpr != null)
        {
            this.invokeExpr.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.invokeExpr = node;
    }

    public TSemicolon getSemicolon()
    {
        return this.semicolon;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this.semicolon != null)
        {
            this.semicolon.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.semicolon = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.invokeExpr)).append(toString(this.semicolon)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.invokeExpr == child)
        {
            this.invokeExpr = null;
            return;
        }

        if(this.semicolon == child)
        {
            this.semicolon = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.invokeExpr == oldChild)
        {
            setInvokeExpr((PInvokeExpr) newChild);
            return;
        }

        if(this.semicolon == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
