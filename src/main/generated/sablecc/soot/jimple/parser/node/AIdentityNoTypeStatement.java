/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AIdentityNoTypeStatement extends PStatement
{
    private PLocalName localName;
    private TColonEquals colonEquals;
    private TAtIdentifier atIdentifier;
    private TSemicolon semicolon;

    public AIdentityNoTypeStatement()
    {
        // Constructor
    }

    public AIdentityNoTypeStatement(
        @SuppressWarnings("hiding") PLocalName _localName_,
        @SuppressWarnings("hiding") TColonEquals _colonEquals_,
        @SuppressWarnings("hiding") TAtIdentifier _atIdentifier_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setLocalName(_localName_);

        setColonEquals(_colonEquals_);

        setAtIdentifier(_atIdentifier_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AIdentityNoTypeStatement(
            cloneNode(this.localName),
            cloneNode(this.colonEquals),
            cloneNode(this.atIdentifier),
            cloneNode(this.semicolon));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIdentityNoTypeStatement(this);
    }

    public PLocalName getLocalName()
    {
        return this.localName;
    }

    public void setLocalName(PLocalName node)
    {
        if(this.localName != null)
        {
            this.localName.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.localName = node;
    }

    public TColonEquals getColonEquals()
    {
        return this.colonEquals;
    }

    public void setColonEquals(TColonEquals node)
    {
        if(this.colonEquals != null)
        {
            this.colonEquals.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.colonEquals = node;
    }

    public TAtIdentifier getAtIdentifier()
    {
        return this.atIdentifier;
    }

    public void setAtIdentifier(TAtIdentifier node)
    {
        if(this.atIdentifier != null)
        {
            this.atIdentifier.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.atIdentifier = node;
    }

    public TSemicolon getSemicolon()
    {
        return this.semicolon;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this.semicolon != null)
        {
            this.semicolon.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.semicolon = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.localName)).append(toString(this.colonEquals)).append(toString(this.atIdentifier)).append(toString(this.semicolon))
				.toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.localName == child)
        {
            this.localName = null;
            return;
        }

        if(this.colonEquals == child)
        {
            this.colonEquals = null;
            return;
        }

        if(this.atIdentifier == child)
        {
            this.atIdentifier = null;
            return;
        }

        if(this.semicolon == child)
        {
            this.semicolon = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.localName == oldChild)
        {
            setLocalName((PLocalName) newChild);
            return;
        }

        if(this.colonEquals == oldChild)
        {
            setColonEquals((TColonEquals) newChild);
            return;
        }

        if(this.atIdentifier == oldChild)
        {
            setAtIdentifier((TAtIdentifier) newChild);
            return;
        }

        if(this.semicolon == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
