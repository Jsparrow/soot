/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import java.util.*;
import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AFileBody extends PFileBody
{
    private TLBrace lBrace;
    private final LinkedList<PMember> member = new LinkedList<>();
    private TRBrace rBrace;

    public AFileBody()
    {
        // Constructor
    }

    public AFileBody(
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") List<?> _member_,
        @SuppressWarnings("hiding") TRBrace _rBrace_)
    {
        // Constructor
        setLBrace(_lBrace_);

        setMember(_member_);

        setRBrace(_rBrace_);

    }

    @Override
    public Object clone()
    {
        return new AFileBody(
            cloneNode(this.lBrace),
            cloneList(this.member),
            cloneNode(this.rBrace));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFileBody(this);
    }

    public TLBrace getLBrace()
    {
        return this.lBrace;
    }

    public void setLBrace(TLBrace node)
    {
        if(this.lBrace != null)
        {
            this.lBrace.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.lBrace = node;
    }

    public LinkedList<PMember> getMember()
    {
        return this.member;
    }

    public void setMember(List<?> list)
    {
        this.member.forEach(e -> e.parent(null));
        this.member.clear();

        list.stream().map(obj_e -> (PMember) obj_e).forEach(e -> {
			if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }
			e.parent(this);
			this.member.add(e);
		});
    }

    public TRBrace getRBrace()
    {
        return this.rBrace;
    }

    public void setRBrace(TRBrace node)
    {
        if(this.rBrace != null)
        {
            this.rBrace.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.rBrace = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.lBrace)).append(toString(this.member)).append(toString(this.rBrace)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.lBrace == child)
        {
            this.lBrace = null;
            return;
        }

        if(this.member.remove(child))
        {
            return;
        }

        if(this.rBrace == child)
        {
            this.rBrace = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.lBrace == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        for(ListIterator<PMember> i = this.member.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMember) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this.rBrace == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
