/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class ABinopExpr extends PBinopExpr
{
    private PImmediate left;
    private PBinop binop;
    private PImmediate right;

    public ABinopExpr()
    {
        // Constructor
    }

    public ABinopExpr(
        @SuppressWarnings("hiding") PImmediate _left_,
        @SuppressWarnings("hiding") PBinop _binop_,
        @SuppressWarnings("hiding") PImmediate _right_)
    {
        // Constructor
        setLeft(_left_);

        setBinop(_binop_);

        setRight(_right_);

    }

    @Override
    public Object clone()
    {
        return new ABinopExpr(
            cloneNode(this.left),
            cloneNode(this.binop),
            cloneNode(this.right));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinopExpr(this);
    }

    public PImmediate getLeft()
    {
        return this.left;
    }

    public void setLeft(PImmediate node)
    {
        if(this.left != null)
        {
            this.left.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.left = node;
    }

    public PBinop getBinop()
    {
        return this.binop;
    }

    public void setBinop(PBinop node)
    {
        if(this.binop != null)
        {
            this.binop.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.binop = node;
    }

    public PImmediate getRight()
    {
        return this.right;
    }

    public void setRight(PImmediate node)
    {
        if(this.right != null)
        {
            this.right.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.right = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.left)).append(toString(this.binop)).append(toString(this.right)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.left == child)
        {
            this.left = null;
            return;
        }

        if(this.binop == child)
        {
            this.binop = null;
            return;
        }

        if(this.right == child)
        {
            this.right = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.left == oldChild)
        {
            setLeft((PImmediate) newChild);
            return;
        }

        if(this.binop == oldChild)
        {
            setBinop((PBinop) newChild);
            return;
        }

        if(this.right == oldChild)
        {
            setRight((PImmediate) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
