/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class Start extends Node
{
    private PFile pFile;
    private EOF eof;

    public Start()
    {
        // Empty body
    }

    public Start(
        @SuppressWarnings("hiding") PFile _pFile_,
        @SuppressWarnings("hiding") EOF _eof_)
    {
        setPFile(_pFile_);
        setEOF(_eof_);
    }

    @Override
    public Object clone()
    {
        return new Start(
            cloneNode(this.pFile),
            cloneNode(this.eof));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseStart(this);
    }

    public PFile getPFile()
    {
        return this.pFile;
    }

    public void setPFile(PFile node)
    {
        if(this.pFile != null)
        {
            this.pFile.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.pFile = node;
    }

    public EOF getEOF()
    {
        return this.eof;
    }

    public void setEOF(EOF node)
    {
        if(this.eof != null)
        {
            this.eof.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.eof = node;
    }

    @Override
    void removeChild(Node child)
    {
        if(this.pFile == child)
        {
            this.pFile = null;
            return;
        }

        if(this.eof == child)
        {
            this.eof = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(Node oldChild, Node newChild)
    {
        if(this.pFile == oldChild)
        {
            setPFile((PFile) newChild);
            return;
        }

        if(this.eof == oldChild)
        {
            setEOF((EOF) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.pFile)).append(toString(this.eof)).toString();
    }
}
