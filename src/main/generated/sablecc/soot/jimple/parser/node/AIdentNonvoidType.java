/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import java.util.*;
import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AIdentNonvoidType extends PNonvoidType
{
    private TIdentifier identifier;
    private final LinkedList<PArrayBrackets> arrayBrackets = new LinkedList<>();

    public AIdentNonvoidType()
    {
        // Constructor
    }

    public AIdentNonvoidType(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") List<?> _arrayBrackets_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setArrayBrackets(_arrayBrackets_);

    }

    @Override
    public Object clone()
    {
        return new AIdentNonvoidType(
            cloneNode(this.identifier),
            cloneList(this.arrayBrackets));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIdentNonvoidType(this);
    }

    public TIdentifier getIdentifier()
    {
        return this.identifier;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this.identifier != null)
        {
            this.identifier.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.identifier = node;
    }

    public LinkedList<PArrayBrackets> getArrayBrackets()
    {
        return this.arrayBrackets;
    }

    public void setArrayBrackets(List<?> list)
    {
        this.arrayBrackets.forEach(e -> e.parent(null));
        this.arrayBrackets.clear();

        list.stream().map(obj_e -> (PArrayBrackets) obj_e).forEach(e -> {
			if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }
			e.parent(this);
			this.arrayBrackets.add(e);
		});
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.identifier)).append(toString(this.arrayBrackets)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.identifier == child)
        {
            this.identifier = null;
            return;
        }

        if(this.arrayBrackets.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.identifier == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        for(ListIterator<PArrayBrackets> i = this.arrayBrackets.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PArrayBrackets) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
