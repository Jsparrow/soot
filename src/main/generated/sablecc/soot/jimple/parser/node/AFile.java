/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import java.util.*;
import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AFile extends PFile
{
    private final LinkedList<PModifier> modifier = new LinkedList<>();
    private PFileType fileType;
    private PClassName className;
    private PExtendsClause extendsClause;
    private PImplementsClause implementsClause;
    private PFileBody fileBody;

    public AFile()
    {
        // Constructor
    }

    public AFile(
        @SuppressWarnings("hiding") List<?> _modifier_,
        @SuppressWarnings("hiding") PFileType _fileType_,
        @SuppressWarnings("hiding") PClassName _className_,
        @SuppressWarnings("hiding") PExtendsClause _extendsClause_,
        @SuppressWarnings("hiding") PImplementsClause _implementsClause_,
        @SuppressWarnings("hiding") PFileBody _fileBody_)
    {
        // Constructor
        setModifier(_modifier_);

        setFileType(_fileType_);

        setClassName(_className_);

        setExtendsClause(_extendsClause_);

        setImplementsClause(_implementsClause_);

        setFileBody(_fileBody_);

    }

    @Override
    public Object clone()
    {
        return new AFile(
            cloneList(this.modifier),
            cloneNode(this.fileType),
            cloneNode(this.className),
            cloneNode(this.extendsClause),
            cloneNode(this.implementsClause),
            cloneNode(this.fileBody));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFile(this);
    }

    public LinkedList<PModifier> getModifier()
    {
        return this.modifier;
    }

    public void setModifier(List<?> list)
    {
        this.modifier.forEach(e -> e.parent(null));
        this.modifier.clear();

        list.stream().map(obj_e -> (PModifier) obj_e).forEach(e -> {
			if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }
			e.parent(this);
			this.modifier.add(e);
		});
    }

    public PFileType getFileType()
    {
        return this.fileType;
    }

    public void setFileType(PFileType node)
    {
        if(this.fileType != null)
        {
            this.fileType.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.fileType = node;
    }

    public PClassName getClassName()
    {
        return this.className;
    }

    public void setClassName(PClassName node)
    {
        if(this.className != null)
        {
            this.className.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.className = node;
    }

    public PExtendsClause getExtendsClause()
    {
        return this.extendsClause;
    }

    public void setExtendsClause(PExtendsClause node)
    {
        if(this.extendsClause != null)
        {
            this.extendsClause.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.extendsClause = node;
    }

    public PImplementsClause getImplementsClause()
    {
        return this.implementsClause;
    }

    public void setImplementsClause(PImplementsClause node)
    {
        if(this.implementsClause != null)
        {
            this.implementsClause.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.implementsClause = node;
    }

    public PFileBody getFileBody()
    {
        return this.fileBody;
    }

    public void setFileBody(PFileBody node)
    {
        if(this.fileBody != null)
        {
            this.fileBody.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.fileBody = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.modifier)).append(toString(this.fileType)).append(toString(this.className)).append(toString(this.extendsClause))
				.append(toString(this.implementsClause)).append(toString(this.fileBody)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.modifier.remove(child))
        {
            return;
        }

        if(this.fileType == child)
        {
            this.fileType = null;
            return;
        }

        if(this.className == child)
        {
            this.className = null;
            return;
        }

        if(this.extendsClause == child)
        {
            this.extendsClause = null;
            return;
        }

        if(this.implementsClause == child)
        {
            this.implementsClause = null;
            return;
        }

        if(this.fileBody == child)
        {
            this.fileBody = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PModifier> i = this.modifier.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PModifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this.fileType == oldChild)
        {
            setFileType((PFileType) newChild);
            return;
        }

        if(this.className == oldChild)
        {
            setClassName((PClassName) newChild);
            return;
        }

        if(this.extendsClause == oldChild)
        {
            setExtendsClause((PExtendsClause) newChild);
            return;
        }

        if(this.implementsClause == oldChild)
        {
            setImplementsClause((PImplementsClause) newChild);
            return;
        }

        if(this.fileBody == oldChild)
        {
            setFileBody((PFileBody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
