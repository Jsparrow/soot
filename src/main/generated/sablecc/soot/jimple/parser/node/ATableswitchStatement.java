/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import java.util.*;
import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class ATableswitchStatement extends PStatement
{
    private TTableswitch tableswitch;
    private TLParen lParen;
    private PImmediate immediate;
    private TRParen rParen;
    private TLBrace lBrace;
    private final LinkedList<PCaseStmt> caseStmt = new LinkedList<>();
    private TRBrace rBrace;
    private TSemicolon semicolon;

    public ATableswitchStatement()
    {
        // Constructor
    }

    public ATableswitchStatement(
        @SuppressWarnings("hiding") TTableswitch _tableswitch_,
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PImmediate _immediate_,
        @SuppressWarnings("hiding") TRParen _rParen_,
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") List<?> _caseStmt_,
        @SuppressWarnings("hiding") TRBrace _rBrace_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setTableswitch(_tableswitch_);

        setLParen(_lParen_);

        setImmediate(_immediate_);

        setRParen(_rParen_);

        setLBrace(_lBrace_);

        setCaseStmt(_caseStmt_);

        setRBrace(_rBrace_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new ATableswitchStatement(
            cloneNode(this.tableswitch),
            cloneNode(this.lParen),
            cloneNode(this.immediate),
            cloneNode(this.rParen),
            cloneNode(this.lBrace),
            cloneList(this.caseStmt),
            cloneNode(this.rBrace),
            cloneNode(this.semicolon));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATableswitchStatement(this);
    }

    public TTableswitch getTableswitch()
    {
        return this.tableswitch;
    }

    public void setTableswitch(TTableswitch node)
    {
        if(this.tableswitch != null)
        {
            this.tableswitch.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.tableswitch = node;
    }

    public TLParen getLParen()
    {
        return this.lParen;
    }

    public void setLParen(TLParen node)
    {
        if(this.lParen != null)
        {
            this.lParen.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.lParen = node;
    }

    public PImmediate getImmediate()
    {
        return this.immediate;
    }

    public void setImmediate(PImmediate node)
    {
        if(this.immediate != null)
        {
            this.immediate.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.immediate = node;
    }

    public TRParen getRParen()
    {
        return this.rParen;
    }

    public void setRParen(TRParen node)
    {
        if(this.rParen != null)
        {
            this.rParen.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.rParen = node;
    }

    public TLBrace getLBrace()
    {
        return this.lBrace;
    }

    public void setLBrace(TLBrace node)
    {
        if(this.lBrace != null)
        {
            this.lBrace.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.lBrace = node;
    }

    public LinkedList<PCaseStmt> getCaseStmt()
    {
        return this.caseStmt;
    }

    public void setCaseStmt(List<?> list)
    {
        this.caseStmt.forEach(e -> e.parent(null));
        this.caseStmt.clear();

        list.stream().map(obj_e -> (PCaseStmt) obj_e).forEach(e -> {
			if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }
			e.parent(this);
			this.caseStmt.add(e);
		});
    }

    public TRBrace getRBrace()
    {
        return this.rBrace;
    }

    public void setRBrace(TRBrace node)
    {
        if(this.rBrace != null)
        {
            this.rBrace.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.rBrace = node;
    }

    public TSemicolon getSemicolon()
    {
        return this.semicolon;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this.semicolon != null)
        {
            this.semicolon.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.semicolon = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.tableswitch)).append(toString(this.lParen)).append(toString(this.immediate)).append(toString(this.rParen))
				.append(toString(this.lBrace)).append(toString(this.caseStmt)).append(toString(this.rBrace)).append(toString(this.semicolon)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.tableswitch == child)
        {
            this.tableswitch = null;
            return;
        }

        if(this.lParen == child)
        {
            this.lParen = null;
            return;
        }

        if(this.immediate == child)
        {
            this.immediate = null;
            return;
        }

        if(this.rParen == child)
        {
            this.rParen = null;
            return;
        }

        if(this.lBrace == child)
        {
            this.lBrace = null;
            return;
        }

        if(this.caseStmt.remove(child))
        {
            return;
        }

        if(this.rBrace == child)
        {
            this.rBrace = null;
            return;
        }

        if(this.semicolon == child)
        {
            this.semicolon = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.tableswitch == oldChild)
        {
            setTableswitch((TTableswitch) newChild);
            return;
        }

        if(this.lParen == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this.immediate == oldChild)
        {
            setImmediate((PImmediate) newChild);
            return;
        }

        if(this.rParen == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        if(this.lBrace == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        for(ListIterator<PCaseStmt> i = this.caseStmt.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCaseStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this.rBrace == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

        if(this.semicolon == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
