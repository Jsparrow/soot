/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AStaticInvokeExpr extends PInvokeExpr
{
    private TStaticinvoke staticinvoke;
    private PMethodSignature methodSignature;
    private TLParen lParen;
    private PArgList argList;
    private TRParen rParen;

    public AStaticInvokeExpr()
    {
        // Constructor
    }

    public AStaticInvokeExpr(
        @SuppressWarnings("hiding") TStaticinvoke _staticinvoke_,
        @SuppressWarnings("hiding") PMethodSignature _methodSignature_,
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PArgList _argList_,
        @SuppressWarnings("hiding") TRParen _rParen_)
    {
        // Constructor
        setStaticinvoke(_staticinvoke_);

        setMethodSignature(_methodSignature_);

        setLParen(_lParen_);

        setArgList(_argList_);

        setRParen(_rParen_);

    }

    @Override
    public Object clone()
    {
        return new AStaticInvokeExpr(
            cloneNode(this.staticinvoke),
            cloneNode(this.methodSignature),
            cloneNode(this.lParen),
            cloneNode(this.argList),
            cloneNode(this.rParen));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStaticInvokeExpr(this);
    }

    public TStaticinvoke getStaticinvoke()
    {
        return this.staticinvoke;
    }

    public void setStaticinvoke(TStaticinvoke node)
    {
        if(this.staticinvoke != null)
        {
            this.staticinvoke.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.staticinvoke = node;
    }

    public PMethodSignature getMethodSignature()
    {
        return this.methodSignature;
    }

    public void setMethodSignature(PMethodSignature node)
    {
        if(this.methodSignature != null)
        {
            this.methodSignature.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.methodSignature = node;
    }

    public TLParen getLParen()
    {
        return this.lParen;
    }

    public void setLParen(TLParen node)
    {
        if(this.lParen != null)
        {
            this.lParen.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.lParen = node;
    }

    public PArgList getArgList()
    {
        return this.argList;
    }

    public void setArgList(PArgList node)
    {
        if(this.argList != null)
        {
            this.argList.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.argList = node;
    }

    public TRParen getRParen()
    {
        return this.rParen;
    }

    public void setRParen(TRParen node)
    {
        if(this.rParen != null)
        {
            this.rParen.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.rParen = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.staticinvoke)).append(toString(this.methodSignature)).append(toString(this.lParen)).append(toString(this.argList))
				.append(toString(this.rParen)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.staticinvoke == child)
        {
            this.staticinvoke = null;
            return;
        }

        if(this.methodSignature == child)
        {
            this.methodSignature = null;
            return;
        }

        if(this.lParen == child)
        {
            this.lParen = null;
            return;
        }

        if(this.argList == child)
        {
            this.argList = null;
            return;
        }

        if(this.rParen == child)
        {
            this.rParen = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.staticinvoke == oldChild)
        {
            setStaticinvoke((TStaticinvoke) newChild);
            return;
        }

        if(this.methodSignature == oldChild)
        {
            setMethodSignature((PMethodSignature) newChild);
            return;
        }

        if(this.lParen == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this.argList == oldChild)
        {
            setArgList((PArgList) newChild);
            return;
        }

        if(this.rParen == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
