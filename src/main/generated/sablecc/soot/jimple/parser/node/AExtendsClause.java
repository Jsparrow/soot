/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AExtendsClause extends PExtendsClause
{
    private TExtends _extends_;
    private PClassName className;

    public AExtendsClause()
    {
        // Constructor
    }

    public AExtendsClause(
        @SuppressWarnings("hiding") TExtends _extends_,
        @SuppressWarnings("hiding") PClassName _className_)
    {
        // Constructor
        setExtends(_extends_);

        setClassName(_className_);

    }

    @Override
    public Object clone()
    {
        return new AExtendsClause(
            cloneNode(this._extends_),
            cloneNode(this.className));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExtendsClause(this);
    }

    public TExtends getExtends()
    {
        return this._extends_;
    }

    public void setExtends(TExtends node)
    {
        if(this._extends_ != null)
        {
            this._extends_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._extends_ = node;
    }

    public PClassName getClassName()
    {
        return this.className;
    }

    public void setClassName(PClassName node)
    {
        if(this.className != null)
        {
            this.className.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.className = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this._extends_)).append(toString(this.className)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._extends_ == child)
        {
            this._extends_ = null;
            return;
        }

        if(this.className == child)
        {
            this.className = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._extends_ == oldChild)
        {
            setExtends((TExtends) newChild);
            return;
        }

        if(this.className == oldChild)
        {
            setClassName((PClassName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
