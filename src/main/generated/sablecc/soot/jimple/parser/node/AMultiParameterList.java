/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AMultiParameterList extends PParameterList
{
    private PParameter parameter;
    private TComma comma;
    private PParameterList parameterList;

    public AMultiParameterList()
    {
        // Constructor
    }

    public AMultiParameterList(
        @SuppressWarnings("hiding") PParameter _parameter_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PParameterList _parameterList_)
    {
        // Constructor
        setParameter(_parameter_);

        setComma(_comma_);

        setParameterList(_parameterList_);

    }

    @Override
    public Object clone()
    {
        return new AMultiParameterList(
            cloneNode(this.parameter),
            cloneNode(this.comma),
            cloneNode(this.parameterList));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultiParameterList(this);
    }

    public PParameter getParameter()
    {
        return this.parameter;
    }

    public void setParameter(PParameter node)
    {
        if(this.parameter != null)
        {
            this.parameter.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.parameter = node;
    }

    public TComma getComma()
    {
        return this.comma;
    }

    public void setComma(TComma node)
    {
        if(this.comma != null)
        {
            this.comma.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.comma = node;
    }

    public PParameterList getParameterList()
    {
        return this.parameterList;
    }

    public void setParameterList(PParameterList node)
    {
        if(this.parameterList != null)
        {
            this.parameterList.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.parameterList = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.parameter)).append(toString(this.comma)).append(toString(this.parameterList)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.parameter == child)
        {
            this.parameter = null;
            return;
        }

        if(this.comma == child)
        {
            this.comma = null;
            return;
        }

        if(this.parameterList == child)
        {
            this.parameterList = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.parameter == oldChild)
        {
            setParameter((PParameter) newChild);
            return;
        }

        if(this.comma == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this.parameterList == oldChild)
        {
            setParameterList((PParameterList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
