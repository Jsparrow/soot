/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AClassNameMultiClassNameList extends PClassNameList
{
    private PClassName className;
    private TComma comma;
    private PClassNameList classNameList;

    public AClassNameMultiClassNameList()
    {
        // Constructor
    }

    public AClassNameMultiClassNameList(
        @SuppressWarnings("hiding") PClassName _className_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PClassNameList _classNameList_)
    {
        // Constructor
        setClassName(_className_);

        setComma(_comma_);

        setClassNameList(_classNameList_);

    }

    @Override
    public Object clone()
    {
        return new AClassNameMultiClassNameList(
            cloneNode(this.className),
            cloneNode(this.comma),
            cloneNode(this.classNameList));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassNameMultiClassNameList(this);
    }

    public PClassName getClassName()
    {
        return this.className;
    }

    public void setClassName(PClassName node)
    {
        if(this.className != null)
        {
            this.className.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.className = node;
    }

    public TComma getComma()
    {
        return this.comma;
    }

    public void setComma(TComma node)
    {
        if(this.comma != null)
        {
            this.comma.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.comma = node;
    }

    public PClassNameList getClassNameList()
    {
        return this.classNameList;
    }

    public void setClassNameList(PClassNameList node)
    {
        if(this.classNameList != null)
        {
            this.classNameList.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.classNameList = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.className)).append(toString(this.comma)).append(toString(this.classNameList)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.className == child)
        {
            this.className = null;
            return;
        }

        if(this.comma == child)
        {
            this.comma = null;
            return;
        }

        if(this.classNameList == child)
        {
            this.classNameList = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.className == oldChild)
        {
            setClassName((PClassName) newChild);
            return;
        }

        if(this.comma == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this.classNameList == oldChild)
        {
            setClassNameList((PClassNameList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
