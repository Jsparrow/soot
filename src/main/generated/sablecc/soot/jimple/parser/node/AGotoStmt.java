/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AGotoStmt extends PGotoStmt
{
    private TGoto _goto_;
    private PLabelName labelName;
    private TSemicolon semicolon;

    public AGotoStmt()
    {
        // Constructor
    }

    public AGotoStmt(
        @SuppressWarnings("hiding") TGoto _goto_,
        @SuppressWarnings("hiding") PLabelName _labelName_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setGoto(_goto_);

        setLabelName(_labelName_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AGotoStmt(
            cloneNode(this._goto_),
            cloneNode(this.labelName),
            cloneNode(this.semicolon));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGotoStmt(this);
    }

    public TGoto getGoto()
    {
        return this._goto_;
    }

    public void setGoto(TGoto node)
    {
        if(this._goto_ != null)
        {
            this._goto_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._goto_ = node;
    }

    public PLabelName getLabelName()
    {
        return this.labelName;
    }

    public void setLabelName(PLabelName node)
    {
        if(this.labelName != null)
        {
            this.labelName.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.labelName = node;
    }

    public TSemicolon getSemicolon()
    {
        return this.semicolon;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this.semicolon != null)
        {
            this.semicolon.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.semicolon = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this._goto_)).append(toString(this.labelName)).append(toString(this.semicolon)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._goto_ == child)
        {
            this._goto_ = null;
            return;
        }

        if(this.labelName == child)
        {
            this.labelName = null;
            return;
        }

        if(this.semicolon == child)
        {
            this.semicolon = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._goto_ == oldChild)
        {
            setGoto((TGoto) newChild);
            return;
        }

        if(this.labelName == oldChild)
        {
            setLabelName((PLabelName) newChild);
            return;
        }

        if(this.semicolon == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
