/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import java.util.*;
import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AFieldMember extends PMember
{
    private final LinkedList<PModifier> modifier = new LinkedList<>();
    private PType type;
    private PName name;
    private TSemicolon semicolon;

    public AFieldMember()
    {
        // Constructor
    }

    public AFieldMember(
        @SuppressWarnings("hiding") List<?> _modifier_,
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") PName _name_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setModifier(_modifier_);

        setType(_type_);

        setName(_name_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AFieldMember(
            cloneList(this.modifier),
            cloneNode(this.type),
            cloneNode(this.name),
            cloneNode(this.semicolon));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFieldMember(this);
    }

    public LinkedList<PModifier> getModifier()
    {
        return this.modifier;
    }

    public void setModifier(List<?> list)
    {
        this.modifier.forEach(e -> e.parent(null));
        this.modifier.clear();

        list.stream().map(obj_e -> (PModifier) obj_e).forEach(e -> {
			if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }
			e.parent(this);
			this.modifier.add(e);
		});
    }

    public PType getType()
    {
        return this.type;
    }

    public void setType(PType node)
    {
        if(this.type != null)
        {
            this.type.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.type = node;
    }

    public PName getName()
    {
        return this.name;
    }

    public void setName(PName node)
    {
        if(this.name != null)
        {
            this.name.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.name = node;
    }

    public TSemicolon getSemicolon()
    {
        return this.semicolon;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this.semicolon != null)
        {
            this.semicolon.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.semicolon = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.modifier)).append(toString(this.type)).append(toString(this.name)).append(toString(this.semicolon))
				.toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.modifier.remove(child))
        {
            return;
        }

        if(this.type == child)
        {
            this.type = null;
            return;
        }

        if(this.name == child)
        {
            this.name = null;
            return;
        }

        if(this.semicolon == child)
        {
            this.semicolon = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PModifier> i = this.modifier.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PModifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this.type == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this.name == oldChild)
        {
            setName((PName) newChild);
            return;
        }

        if(this.semicolon == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
