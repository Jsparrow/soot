/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AAssignStatement extends PStatement
{
    private PVariable variable;
    private TEquals equals;
    private PExpression expression;
    private TSemicolon semicolon;

    public AAssignStatement()
    {
        // Constructor
    }

    public AAssignStatement(
        @SuppressWarnings("hiding") PVariable _variable_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setVariable(_variable_);

        setEquals(_equals_);

        setExpression(_expression_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AAssignStatement(
            cloneNode(this.variable),
            cloneNode(this.equals),
            cloneNode(this.expression),
            cloneNode(this.semicolon));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssignStatement(this);
    }

    public PVariable getVariable()
    {
        return this.variable;
    }

    public void setVariable(PVariable node)
    {
        if(this.variable != null)
        {
            this.variable.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.variable = node;
    }

    public TEquals getEquals()
    {
        return this.equals;
    }

    public void setEquals(TEquals node)
    {
        if(this.equals != null)
        {
            this.equals.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.equals = node;
    }

    public PExpression getExpression()
    {
        return this.expression;
    }

    public void setExpression(PExpression node)
    {
        if(this.expression != null)
        {
            this.expression.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.expression = node;
    }

    public TSemicolon getSemicolon()
    {
        return this.semicolon;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this.semicolon != null)
        {
            this.semicolon.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.semicolon = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.variable)).append(toString(this.equals)).append(toString(this.expression)).append(toString(this.semicolon))
				.toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.variable == child)
        {
            this.variable = null;
            return;
        }

        if(this.equals == child)
        {
            this.equals = null;
            return;
        }

        if(this.expression == child)
        {
            this.expression = null;
            return;
        }

        if(this.semicolon == child)
        {
            this.semicolon = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.variable == oldChild)
        {
            setVariable((PVariable) newChild);
            return;
        }

        if(this.equals == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this.expression == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this.semicolon == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
