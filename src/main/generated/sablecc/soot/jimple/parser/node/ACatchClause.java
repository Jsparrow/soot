/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class ACatchClause extends PCatchClause
{
    private TCatch _catch_;
    private PClassName name;
    private TFrom from;
    private PLabelName fromLabel;
    private TTo to;
    private PLabelName toLabel;
    private TWith with;
    private PLabelName withLabel;
    private TSemicolon semicolon;

    public ACatchClause()
    {
        // Constructor
    }

    public ACatchClause(
        @SuppressWarnings("hiding") TCatch _catch_,
        @SuppressWarnings("hiding") PClassName _name_,
        @SuppressWarnings("hiding") TFrom _from_,
        @SuppressWarnings("hiding") PLabelName _fromLabel_,
        @SuppressWarnings("hiding") TTo _to_,
        @SuppressWarnings("hiding") PLabelName _toLabel_,
        @SuppressWarnings("hiding") TWith _with_,
        @SuppressWarnings("hiding") PLabelName _withLabel_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setCatch(_catch_);

        setName(_name_);

        setFrom(_from_);

        setFromLabel(_fromLabel_);

        setTo(_to_);

        setToLabel(_toLabel_);

        setWith(_with_);

        setWithLabel(_withLabel_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new ACatchClause(
            cloneNode(this._catch_),
            cloneNode(this.name),
            cloneNode(this.from),
            cloneNode(this.fromLabel),
            cloneNode(this.to),
            cloneNode(this.toLabel),
            cloneNode(this.with),
            cloneNode(this.withLabel),
            cloneNode(this.semicolon));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACatchClause(this);
    }

    public TCatch getCatch()
    {
        return this._catch_;
    }

    public void setCatch(TCatch node)
    {
        if(this._catch_ != null)
        {
            this._catch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._catch_ = node;
    }

    public PClassName getName()
    {
        return this.name;
    }

    public void setName(PClassName node)
    {
        if(this.name != null)
        {
            this.name.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.name = node;
    }

    public TFrom getFrom()
    {
        return this.from;
    }

    public void setFrom(TFrom node)
    {
        if(this.from != null)
        {
            this.from.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.from = node;
    }

    public PLabelName getFromLabel()
    {
        return this.fromLabel;
    }

    public void setFromLabel(PLabelName node)
    {
        if(this.fromLabel != null)
        {
            this.fromLabel.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.fromLabel = node;
    }

    public TTo getTo()
    {
        return this.to;
    }

    public void setTo(TTo node)
    {
        if(this.to != null)
        {
            this.to.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.to = node;
    }

    public PLabelName getToLabel()
    {
        return this.toLabel;
    }

    public void setToLabel(PLabelName node)
    {
        if(this.toLabel != null)
        {
            this.toLabel.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.toLabel = node;
    }

    public TWith getWith()
    {
        return this.with;
    }

    public void setWith(TWith node)
    {
        if(this.with != null)
        {
            this.with.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.with = node;
    }

    public PLabelName getWithLabel()
    {
        return this.withLabel;
    }

    public void setWithLabel(PLabelName node)
    {
        if(this.withLabel != null)
        {
            this.withLabel.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.withLabel = node;
    }

    public TSemicolon getSemicolon()
    {
        return this.semicolon;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this.semicolon != null)
        {
            this.semicolon.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.semicolon = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this._catch_)).append(toString(this.name)).append(toString(this.from)).append(toString(this.fromLabel))
				.append(toString(this.to)).append(toString(this.toLabel)).append(toString(this.with)).append(toString(this.withLabel)).append(toString(this.semicolon)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._catch_ == child)
        {
            this._catch_ = null;
            return;
        }

        if(this.name == child)
        {
            this.name = null;
            return;
        }

        if(this.from == child)
        {
            this.from = null;
            return;
        }

        if(this.fromLabel == child)
        {
            this.fromLabel = null;
            return;
        }

        if(this.to == child)
        {
            this.to = null;
            return;
        }

        if(this.toLabel == child)
        {
            this.toLabel = null;
            return;
        }

        if(this.with == child)
        {
            this.with = null;
            return;
        }

        if(this.withLabel == child)
        {
            this.withLabel = null;
            return;
        }

        if(this.semicolon == child)
        {
            this.semicolon = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._catch_ == oldChild)
        {
            setCatch((TCatch) newChild);
            return;
        }

        if(this.name == oldChild)
        {
            setName((PClassName) newChild);
            return;
        }

        if(this.from == oldChild)
        {
            setFrom((TFrom) newChild);
            return;
        }

        if(this.fromLabel == oldChild)
        {
            setFromLabel((PLabelName) newChild);
            return;
        }

        if(this.to == oldChild)
        {
            setTo((TTo) newChild);
            return;
        }

        if(this.toLabel == oldChild)
        {
            setToLabel((PLabelName) newChild);
            return;
        }

        if(this.with == oldChild)
        {
            setWith((TWith) newChild);
            return;
        }

        if(this.withLabel == oldChild)
        {
            setWithLabel((PLabelName) newChild);
            return;
        }

        if(this.semicolon == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
