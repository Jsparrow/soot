/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class ACmpBinop extends PBinop
{
    private TCmp cmp;

    public ACmpBinop()
    {
        // Constructor
    }

    public ACmpBinop(
        @SuppressWarnings("hiding") TCmp _cmp_)
    {
        // Constructor
        setCmp(_cmp_);

    }

    @Override
    public Object clone()
    {
        return new ACmpBinop(
            cloneNode(this.cmp));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACmpBinop(this);
    }

    public TCmp getCmp()
    {
        return this.cmp;
    }

    public void setCmp(TCmp node)
    {
        if(this.cmp != null)
        {
            this.cmp.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.cmp = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this.cmp);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.cmp == child)
        {
            this.cmp = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.cmp == oldChild)
        {
            setCmp((TCmp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
