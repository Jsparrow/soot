/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class ADynamicInvokeExpr extends PInvokeExpr
{
    private TDynamicinvoke dynamicinvoke;
    private TStringConstant stringConstant;
    private PUnnamedMethodSignature dynmethod;
    private TLParen firstl;
    private PArgList dynargs;
    private TRParen firstr;
    private PMethodSignature bsm;
    private TLParen lParen;
    private PArgList staticargs;
    private TRParen rParen;

    public ADynamicInvokeExpr()
    {
        // Constructor
    }

    public ADynamicInvokeExpr(
        @SuppressWarnings("hiding") TDynamicinvoke _dynamicinvoke_,
        @SuppressWarnings("hiding") TStringConstant _stringConstant_,
        @SuppressWarnings("hiding") PUnnamedMethodSignature _dynmethod_,
        @SuppressWarnings("hiding") TLParen _firstl_,
        @SuppressWarnings("hiding") PArgList _dynargs_,
        @SuppressWarnings("hiding") TRParen _firstr_,
        @SuppressWarnings("hiding") PMethodSignature _bsm_,
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PArgList _staticargs_,
        @SuppressWarnings("hiding") TRParen _rParen_)
    {
        // Constructor
        setDynamicinvoke(_dynamicinvoke_);

        setStringConstant(_stringConstant_);

        setDynmethod(_dynmethod_);

        setFirstl(_firstl_);

        setDynargs(_dynargs_);

        setFirstr(_firstr_);

        setBsm(_bsm_);

        setLParen(_lParen_);

        setStaticargs(_staticargs_);

        setRParen(_rParen_);

    }

    @Override
    public Object clone()
    {
        return new ADynamicInvokeExpr(
            cloneNode(this.dynamicinvoke),
            cloneNode(this.stringConstant),
            cloneNode(this.dynmethod),
            cloneNode(this.firstl),
            cloneNode(this.dynargs),
            cloneNode(this.firstr),
            cloneNode(this.bsm),
            cloneNode(this.lParen),
            cloneNode(this.staticargs),
            cloneNode(this.rParen));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADynamicInvokeExpr(this);
    }

    public TDynamicinvoke getDynamicinvoke()
    {
        return this.dynamicinvoke;
    }

    public void setDynamicinvoke(TDynamicinvoke node)
    {
        if(this.dynamicinvoke != null)
        {
            this.dynamicinvoke.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.dynamicinvoke = node;
    }

    public TStringConstant getStringConstant()
    {
        return this.stringConstant;
    }

    public void setStringConstant(TStringConstant node)
    {
        if(this.stringConstant != null)
        {
            this.stringConstant.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.stringConstant = node;
    }

    public PUnnamedMethodSignature getDynmethod()
    {
        return this.dynmethod;
    }

    public void setDynmethod(PUnnamedMethodSignature node)
    {
        if(this.dynmethod != null)
        {
            this.dynmethod.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.dynmethod = node;
    }

    public TLParen getFirstl()
    {
        return this.firstl;
    }

    public void setFirstl(TLParen node)
    {
        if(this.firstl != null)
        {
            this.firstl.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.firstl = node;
    }

    public PArgList getDynargs()
    {
        return this.dynargs;
    }

    public void setDynargs(PArgList node)
    {
        if(this.dynargs != null)
        {
            this.dynargs.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.dynargs = node;
    }

    public TRParen getFirstr()
    {
        return this.firstr;
    }

    public void setFirstr(TRParen node)
    {
        if(this.firstr != null)
        {
            this.firstr.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.firstr = node;
    }

    public PMethodSignature getBsm()
    {
        return this.bsm;
    }

    public void setBsm(PMethodSignature node)
    {
        if(this.bsm != null)
        {
            this.bsm.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.bsm = node;
    }

    public TLParen getLParen()
    {
        return this.lParen;
    }

    public void setLParen(TLParen node)
    {
        if(this.lParen != null)
        {
            this.lParen.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.lParen = node;
    }

    public PArgList getStaticargs()
    {
        return this.staticargs;
    }

    public void setStaticargs(PArgList node)
    {
        if(this.staticargs != null)
        {
            this.staticargs.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.staticargs = node;
    }

    public TRParen getRParen()
    {
        return this.rParen;
    }

    public void setRParen(TRParen node)
    {
        if(this.rParen != null)
        {
            this.rParen.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.rParen = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.dynamicinvoke)).append(toString(this.stringConstant)).append(toString(this.dynmethod)).append(toString(this.firstl))
				.append(toString(this.dynargs)).append(toString(this.firstr)).append(toString(this.bsm)).append(toString(this.lParen)).append(toString(this.staticargs))
				.append(toString(this.rParen)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.dynamicinvoke == child)
        {
            this.dynamicinvoke = null;
            return;
        }

        if(this.stringConstant == child)
        {
            this.stringConstant = null;
            return;
        }

        if(this.dynmethod == child)
        {
            this.dynmethod = null;
            return;
        }

        if(this.firstl == child)
        {
            this.firstl = null;
            return;
        }

        if(this.dynargs == child)
        {
            this.dynargs = null;
            return;
        }

        if(this.firstr == child)
        {
            this.firstr = null;
            return;
        }

        if(this.bsm == child)
        {
            this.bsm = null;
            return;
        }

        if(this.lParen == child)
        {
            this.lParen = null;
            return;
        }

        if(this.staticargs == child)
        {
            this.staticargs = null;
            return;
        }

        if(this.rParen == child)
        {
            this.rParen = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.dynamicinvoke == oldChild)
        {
            setDynamicinvoke((TDynamicinvoke) newChild);
            return;
        }

        if(this.stringConstant == oldChild)
        {
            setStringConstant((TStringConstant) newChild);
            return;
        }

        if(this.dynmethod == oldChild)
        {
            setDynmethod((PUnnamedMethodSignature) newChild);
            return;
        }

        if(this.firstl == oldChild)
        {
            setFirstl((TLParen) newChild);
            return;
        }

        if(this.dynargs == oldChild)
        {
            setDynargs((PArgList) newChild);
            return;
        }

        if(this.firstr == oldChild)
        {
            setFirstr((TRParen) newChild);
            return;
        }

        if(this.bsm == oldChild)
        {
            setBsm((PMethodSignature) newChild);
            return;
        }

        if(this.lParen == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this.staticargs == oldChild)
        {
            setStaticargs((PArgList) newChild);
            return;
        }

        if(this.rParen == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
