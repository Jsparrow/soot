/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import soot.jimple.parser.analysis.*;

@SuppressWarnings("nls")
public final class AFloatConstant extends PConstant
{
    private TMinus minus;
    private TFloatConstant floatConstant;

    public AFloatConstant()
    {
        // Constructor
    }

    public AFloatConstant(
        @SuppressWarnings("hiding") TMinus _minus_,
        @SuppressWarnings("hiding") TFloatConstant _floatConstant_)
    {
        // Constructor
        setMinus(_minus_);

        setFloatConstant(_floatConstant_);

    }

    @Override
    public Object clone()
    {
        return new AFloatConstant(
            cloneNode(this.minus),
            cloneNode(this.floatConstant));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFloatConstant(this);
    }

    public TMinus getMinus()
    {
        return this.minus;
    }

    public void setMinus(TMinus node)
    {
        if(this.minus != null)
        {
            this.minus.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.minus = node;
    }

    public TFloatConstant getFloatConstant()
    {
        return this.floatConstant;
    }

    public void setFloatConstant(TFloatConstant node)
    {
        if(this.floatConstant != null)
        {
            this.floatConstant.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this.floatConstant = node;
    }

    @Override
    public String toString()
    {
        return new StringBuilder().append("").append(toString(this.minus)).append(toString(this.floatConstant)).toString();
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this.minus == child)
        {
            this.minus = null;
            return;
        }

        if(this.floatConstant == child)
        {
            this.floatConstant = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this.minus == oldChild)
        {
            setMinus((TMinus) newChild);
            return;
        }

        if(this.floatConstant == oldChild)
        {
            setFloatConstant((TFloatConstant) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
